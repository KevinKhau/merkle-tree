{"version":3,"sources":["Merkle/MerkleNode.tsx","Merkle/MerkleTree.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MerkleNode","props","left","right","hash","level","data","this","applyHash","Error","concatenate","hash1","hash2","message","require","createHash","update","digest","MerkleTree","root","nodes","leaves","createMerkleTree","length","height","map","str","buildMerkleTree","push","parents","i","nbLeaves","Math","ceil","log","index","filter","node","App","format","trim","split","merkleTree","datasource","merkleTreeToOrgChart","state","selectedChartNode","handleClick","bind","handleChange","setSelectedNode","className","type","defaultValue","onChange","e","value","onClick","draggable","pan","zoom","onClickNode","setState","target","merkleNodeToOrgChartNode","merkleNode","id","name","title","children","v","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9283aa18.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype Props = {\r\n    data?: string;\r\n    left?: MerkleNode;\r\n    right?: MerkleNode;\r\n    level: number;\r\n};\r\n\r\nclass MerkleNode {\r\n\r\n    left?: MerkleNode;\r\n    right?: MerkleNode;\r\n    hash: string;\r\n    level = -1;\r\n    /**\r\n     * For demonstrative purpose. Storing data makes the hashing useless.\r\n     */\r\n    data: string;\r\n\r\n    constructor(props: Props) {\r\n        this.level = props.level;\r\n        if (props.data) {\r\n            this.data = props.data;\r\n            this.hash = this.applyHash(this.data);\r\n        } else if (props.left && props.right) {\r\n            this.left = props.left;\r\n            this.right = props.right;\r\n            this.data = this.concatenate(props.left.hash, props.right.hash)\r\n            this.hash = this.applyHash(this.data);\r\n        } else {\r\n            throw new Error(\"Expected Arguments: `data` or `left and right`\");\r\n        }\r\n    }\r\n\r\n    concatenate(hash1: string, hash2: string): string {\r\n        return hash1 + hash2;\r\n    }\r\n\r\n    applyHash(message: string) {\r\n        const crypto = require('crypto');\r\n\r\n        // hash the message\r\n        return crypto.createHash('sha256').update(message).digest('base64');\r\n    }\r\n\r\n}\r\n\r\nexport default MerkleNode;\r\n","import React from 'react';\r\nimport MerkleNode from \"./MerkleNode\";\r\nimport {MerkleTreeInterface} from \"./MerkleTreeInterface\";\r\n\r\nexport class MerkleTree implements MerkleTreeInterface {\r\n    root!: MerkleNode;\r\n    nodes: MerkleNode[] = [];\r\n    leaves: MerkleNode[] = [];\r\n\r\n    constructor(data: string[]) {\r\n        this.createMerkleTree(data);\r\n    }\r\n\r\n    createMerkleTree(data: string[]): MerkleTree {\r\n        if (data == null || data.length == 0) {\r\n            throw new Error(\"Input data must have one or more items.\");\r\n        }\r\n        const height = this.height(data.length);\r\n        this.leaves = data.map(str => new MerkleNode({data: str, level: height}))\r\n        this.buildMerkleTree(this.leaves, height);\r\n        return this;\r\n    }\r\n\r\n    buildMerkleTree(nodes: MerkleNode[], level: number): void {\r\n        if (nodes.length === 1) {\r\n            this.nodes.push(...nodes);\r\n            this.root = nodes[0];\r\n            return;\r\n        }\r\n\r\n        const parents: MerkleNode[] = [];\r\n        for (let i = 0; i < nodes.length; i += 2) {\r\n            if (i + 1 < nodes.length) {\r\n                this.nodes.push(nodes[i], nodes[i + 1]);\r\n                parents.push(new MerkleNode({left: nodes[i], right: nodes[i + 1], level: level - 1})); // new node\r\n            } else {\r\n                parents.push(nodes[i]); // last node elevated to higher level\r\n            }\r\n        }\r\n        this.buildMerkleTree(parents, --level);\r\n    }\r\n\r\n    height(nbLeaves?: number): number {\r\n        // Constant implementation using binary tree properties\r\n        return Math.ceil(Math.log(nbLeaves ?? this.leaves.length) / Math.log(2));\r\n    }\r\n\r\n    level(index: number): string[] {\r\n        const height = this.height();\r\n        if (index > height) {\r\n            throw new Error(\"Input index incorrect. Expected: less or equal to \" + height + \".\");\r\n        }\r\n        return this.nodes.filter(node => node.level === index).map(node => node.hash);\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\n// @ts-ignore\r\nimport OrganizationChart from '@dabeng/react-orgchart';\r\nimport {MerkleTree} from \"./Merkle/MerkleTree\";\r\nimport MerkleNode from \"./Merkle/MerkleNode\";\r\n\r\ntype Props = {\r\n\r\n};\r\ntype State = {\r\n    data: string;\r\n    merkleTree: MerkleTree;\r\n    datasource: object;\r\n    selectedChartNode: MerkleNode;\r\n};\r\nclass App extends React.Component<Props, State> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        const data = 'Sorare Kevin Blockchain Football';\r\n        const merkleTree = new MerkleTree(this.format(data));\r\n        const datasource = this.merkleTreeToOrgChart(merkleTree);\r\n        this.state = {\r\n            data,\r\n            merkleTree,\r\n            datasource,\r\n            selectedChartNode: datasource\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.setSelectedNode = this.setSelectedNode.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <input type=\"text\" defaultValue={this.state.data} onChange={e => this.handleChange(e)}/>\r\n                <input type=\"button\" value=\"Create Tree\" onClick={this.handleClick}/>\r\n                <OrganizationChart datasource={this.state.datasource}\r\n                                   draggable={true} pan={true} zoom={true}\r\n                                   onClickNode={this.setSelectedNode}/>\r\n               <div className=\"tree-details\">\r\n                   <p className=\"height\">Tree Height: {this.state.merkleTree.height()}</p>\r\n                   <p className=\"level\">Level {this.state.selectedChartNode.level}: {this.state.merkleTree.level(this.state.selectedChartNode.level)}</p>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        this.setState({data: e.target.value})\r\n    }\r\n\r\n    handleClick() {\r\n        const merkleTree = new MerkleTree(this.format(this.state.data));\r\n        const datasource = this.merkleTreeToOrgChart(merkleTree);\r\n        this.setState({\r\n            merkleTree,\r\n            datasource,\r\n            selectedChartNode: datasource\r\n        });\r\n    }\r\n\r\n    setSelectedNode(node: MerkleNode) {\r\n        this.setState({selectedChartNode: node});\r\n    }\r\n\r\n    format = (str: string) => str.trim().split(/\\s+/);\r\n\r\n    merkleTreeToOrgChart(merkleTree: MerkleTree) {\r\n        return this.merkleNodeToOrgChartNode(merkleTree.root);\r\n    }\r\n\r\n    merkleNodeToOrgChartNode(merkleNode: MerkleNode): any {\r\n        return {\r\n            id: merkleNode.hash,\r\n            name: merkleNode.hash,\r\n            title: merkleNode.data,\r\n            level: merkleNode.level,\r\n            children: [merkleNode.left, merkleNode.right].filter(v => !!v).map(node => this.merkleNodeToOrgChartNode(node as MerkleNode))\r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}